diff --git a/app/router/condition_geoip.go b/app/router/condition_geoip.go
index 73a5ff5..245e980 100644
--- a/app/router/condition_geoip.go
+++ b/app/router/condition_geoip.go
@@ -4,7 +4,9 @@
 package router
 
 import (
-	"inet.af/netaddr"
+	"net/netip"
+
+	"go4.org/netipx"
 
 	"github.com/v2fly/v2ray-core/v4/common/net"
 )
@@ -12,18 +14,20 @@ import (
 type GeoIPMatcher struct {
 	countryCode  string
 	reverseMatch bool
-	ip4          *netaddr.IPSet
-	ip6          *netaddr.IPSet
+	ip4          *netipx.IPSet
+	ip6          *netipx.IPSet
 }
 
 func (m *GeoIPMatcher) Init(cidrs []*CIDR) error {
-	var builder4, builder6 netaddr.IPSetBuilder
+	var builder4, builder6 netipx.IPSetBuilder
 	for _, cidr := range cidrs {
-		netaddrIP, ok := netaddr.FromStdIP(net.IP(cidr.GetIp()))
+		netaddrIP, ok := netip.AddrFromSlice(cidr.GetIp())
 		if !ok {
 			return newError("invalid IP address ", cidr)
 		}
-		ipPrefix := netaddr.IPPrefixFrom(netaddrIP, uint8(cidr.GetPrefix()))
+		netaddrIP = netaddrIP.Unmap()
+		ipPrefix := netip.PrefixFrom(netaddrIP, int(cidr.GetPrefix()))
+
 		switch {
 		case netaddrIP.Is4():
 			builder4.AddPrefix(ipPrefix)
@@ -50,7 +54,7 @@ func (m *GeoIPMatcher) SetReverseMatch(isReverseMatch bool) {
 }
 
 func (m *GeoIPMatcher) match4(ip net.IP) bool {
-	nip, ok := netaddr.FromStdIP(ip)
+	nip, ok := netipx.FromStdIP(ip)
 	if !ok {
 		return false
 	}
@@ -58,7 +62,7 @@ func (m *GeoIPMatcher) match4(ip net.IP) bool {
 }
 
 func (m *GeoIPMatcher) match6(ip net.IP) bool {
-	nip, ok := netaddr.FromStdIP(ip)
+	nip, ok := netipx.FromStdIP(ip)
 	if !ok {
 		return false
 	}
